apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

repositories {
    maven {
        url 'https://maven.google.com'
    }
    maven {
        url "https://jitpack.io"
    }
    jcenter()
}

ext {
    supportLibVersion = '28.0.0'
}

android {
    compileSdkVersion 28
//    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.kr.myplayer"
        minSdkVersion 28
        targetSdkVersion 28

        versionCode 1
        versionName "1.0.0"

        flavorDimensions "default"
        vectorDrawables.useSupportLibrary = true

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        multiDexEnabled true

        buildConfigField("String", "LASTFM_API_KEY", "\"${getProperty(getProperties('../local.properties'), 'LASTFM_API_KEY')}\"")
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false

            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'

            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
            }
        }
        release {
            //混淆代码

            minifyEnabled true
            debuggable false
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }

        android.applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "APlayer_v${defaultConfig.versionName}_${variant.productFlavors[0].name}_${new Date().format("yyyy-MM-dd HH-mm")}.apk"
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    androidExtensions {
        experimental = true
    }

    productFlavors {

        krsmart{}

        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
        disable 'InvalidPackage'
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion "$supportLibVersion"
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0-rc01'
    implementation "androidx.activity:activity-ktx:1.1.0"
    implementation "androidx.fragment:fragment-ktx:1.1.0"
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.0.0'
    implementation 'com.github.bumptech.glide:glide:4.1.0'
    implementation 'jp.wasabeef:glide-transformations:4.0.0'
    implementation 'com.jakewharton.rxbinding:rxbinding:0.3.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    testImplementation 'junit:junit:4.12'

    //support
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.palette:palette-ktx:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.media:media:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'io.apptik.widget:multislider:1.3'

    //coroutine
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

    //fresco
    implementation 'com.remix.fresco:fresco:1.10.2'

    //materialDialog
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'

    //rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.11'

    implementation "com.github.akarnokd:rxjava2-extensions:0.18.1"

    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.1'

    //rxpermission
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'

    //kotlin
    implementation 'org.jetbrains.anko:anko-common:0.10.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //leakCanary

    //butterKnife
    implementation 'com.jakewharton:butterknife:9.0.0'
    kapt 'com.jakewharton:butterknife-compiler:9.0.0'

    //bugly
    implementation 'com.tencent.bugly:crashreport:3.0.0'

    //gp
    implementation 'com.anjlab.android.iab.v3:library:1.0.44'

    //room
    def room_version = "1.1.1"
    implementation 'androidx.room:room-runtime:2.2.5'
    implementation 'androidx.room:room-ktx:2.2.5'
    kapt 'androidx.room:room-compiler:2.2.5' // use kapt for Kotlin
    implementation 'androidx.room:room-rxjava2:2.2.5'

    //timber
    implementation 'com.jakewharton.timber:timber:4.7.1'

    //other
    implementation 'com.facebook.rebound:rebound:0.3.8'
    implementation 'com.soundcloud.android:android-crop:1.0.1@aar'
    implementation 'com.github.promeg:tinypinyin:2.0.1'
    implementation 'org.slf4j:slf4j-api:1.7.28'
    implementation 'com.github.tony19:logback-android:2.0.0'

    implementation 'net.steamcrafted:materialiconlib:1.1.4'

    implementation 'at.wirecube:additive_animations:1.7.5'

    implementation 'com.sothree.slidinguppanel:library:3.4.0'

    implementation 'com.github.lany192:NumberPicker:1.0.3'

    implementation project(':library-circularview')

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.5'
}

def getProperties(String fileName) {
    final Properties properties = new Properties()
    def file = file(fileName)
    if (file.exists()) {
        file.withInputStream { stream -> properties.load(stream) }
    }
    return properties
}

def getProperty(Properties properties, String name) {
    return properties.getProperty(name) ?: "$name missing"
}
